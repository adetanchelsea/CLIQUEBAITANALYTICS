-- EXPLORATORY ANALYSIS
-- PART 1: DIGITAL ANALYSIS
-- 1. How many users are there?
SELECT DISTINCT COUNT(*) FROM USERS;

-- 2. How many cookies does each user have on average?
SELECT 
    AVG(cookie_count) AS avg_cookies_per_user
FROM (
    SELECT USERS.USER_ID, COUNT(DISTINCT EVENTS.COOKIE_ID) AS cookie_count
    FROM users
    INNER JOIN EVENTS ON USERS.COOKIE_ID = EVENTS.COOKIE_ID
    GROUP BY USERS.USER_ID
);

-- 3. What is the unique number of visits by all users per month?
SELECT 
    TO_VARCHAR(DATE_TRUNC('month', EVENT_TIME), 'MMMM') AS month_name,
    COUNT(DISTINCT VISIT_ID) AS unique_visits
FROM EVENTS
GROUP BY DATE_TRUNC('month', EVENT_TIME)
ORDER BY unique_visits DESC

--4. What is the number of events for each event type?
SELECT DISTINCT (EVENTS.EVENT_TYPE) AS event_type, COUNT(EVENTS.EVENT_TYPE) AS count
FROM EVENTS
INNER JOIN EVENT_IDENTIFIER ON EVENTS.EVENT_TYPE = EVENT_IDENTIFIER.EVENT_TYPE
GROUP BY EVENTS.EVENT_TYPE

--5. What is the percentage of visits which have a purchase event?

WITH visit_purchase AS (
    SELECT
        VISIT_ID,
        COUNT_IF(EVENT_TYPE = 3) > 0 AS has_purchase
    FROM EVENTS
    GROUP BY VISIT_ID
)

SELECT
    ROUND((COUNT_IF(has_purchase) * 100.0) / COUNT(*),2) AS purchase_percentage
FROM visit_purchase;

--6. What are the top 3 pages by number of views?
SELECT
    PAGE_HIERARCHY.PAGE_NAME,
    COUNT(*) AS view_count
FROM EVENTS
INNER JOIN PAGE_HIERARCHY ON EVENTS.PAGE_ID = PAGE_HIERARCHY.PAGE_ID 
WHERE EVENTS.EVENT_TYPE = 1
GROUP BY PAGE_HIERARCHY.PAGE_NAME
ORDER BY view_count DESC
LIMIT 3;

-- 7. What is the percentage of visits which view the checkout page but do not have a purchase event?
WITH checkout_visits AS (
    SELECT DISTINCT VISIT_ID
    FROM EVENTS
    WHERE PAGE_ID = 12 -- Checkouts
),
purchase_visits AS (
    SELECT DISTINCT VISIT_ID
    FROM EVENTS
    WHERE EVENT_TYPE = 3
)
SELECT 
    COUNT(*) AS visits_no_purchase,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM checkout_visits)) AS percentage_no_purchase
FROM checkout_visits
WHERE visit_id NOT IN (SELECT visit_id FROM purchase_visits);



-- PART 2: PRODUCT FUNNEL ANALYSIS
-- Creating the first product funnel table
CREATE OR REPLACE TABLE product_funnel_summary AS
SELECT 
    P.PAGE_NAME AS product_name,
    P.PRODUCT_CATEGORY AS product_category,
    COUNT(CASE WHEN E.EVENT_TYPE = 1 THEN 1 END) AS views,
    COUNT(CASE WHEN E.EVENT_TYPE = 2 THEN 1 END) AS added_to_cart,
    COUNT(CASE WHEN E.EVENT_TYPE = 2 AND E.COOKIE_ID NOT IN (
        SELECT COOKIE_ID 
        FROM EVENTS 
        WHERE EVENT_TYPE = 3 AND PAGE_ID = P.PAGE_ID
    ) THEN 1 END) AS abandoned_carts,
    COUNT(CASE WHEN E.EVENT_TYPE = 3 THEN 1 END) AS times_purchased
FROM EVENTS E
JOIN PAGE_HIERARCHY P
    ON E.PAGE_ID = P.PAGE_ID
WHERE P.PRODUCT_ID IS NOT NULL
GROUP BY P.PAGE_NAME, P.PRODUCT_CATEGORY
ORDER BY times_purchased DESC;

SELECT * FROM product_funnel_summary;

-- Creating the second product funnel table
CREATE OR REPLACE TABLE CATEGORY_FUNNEL_SUMMARY AS
SELECT 
    P.PRODUCT_CATEGORY,
    COUNT(CASE WHEN E.EVENT_TYPE = 1 THEN 1 END) AS TIMES_VIEWED,
    COUNT(CASE WHEN E.EVENT_TYPE = 2 THEN 1 END) AS TIMES_ADDED_TO_CART,
    COUNT(CASE WHEN E.EVENT_TYPE = 2 AND E.COOKIE_ID NOT IN (
        SELECT E2.COOKIE_ID 
        FROM EVENTS E2
        JOIN PAGE_HIERARCHY P2 
            ON E2.PAGE_ID = P2.PAGE_ID
        WHERE E2.EVENT_TYPE = 3 
          AND P2.PRODUCT_CATEGORY = P.PRODUCT_CATEGORY
    ) THEN 1 END) AS ABANDONED_CARTS,
    COUNT(CASE WHEN E.EVENT_TYPE = 3 THEN 1 END) AS TIMES_PURCHASED
FROM EVENTS E
JOIN PAGE_HIERARCHY P
    ON E.PAGE_ID = P.PAGE_ID
WHERE P.PRODUCT_CATEGORY IS NOT NULL
GROUP BY P.PRODUCT_CATEGORY
ORDER BY TIMES_PURCHASED DESC;

SELECT * FROM CATEGORY_FUNNEL_SUMMARY;

-- 8. Which product had the most views, cart adds and purchases?
-- Product with the most views
SELECT PRODUCT_NAME, VIEWS
FROM PRODUCT_FUNNEL_SUMMARY
ORDER BY VIEWS DESC
LIMIT 1;

-- Product with the most cart adds
SELECT PRODUCT_NAME, ADDED_TO_CART
FROM PRODUCT_FUNNEL_SUMMARY
ORDER BY ADDED_TO_CART DESC
LIMIT 1;

-- Product with the most purchases
SELECT PRODUCT_NAME, TIMES_PURCHASED
FROM PRODUCT_FUNNEL_SUMMARY
ORDER BY TIMES_PURCHASED DESC
LIMIT 1;

-- 9. Which product was most likely to be abandoned?
SELECT 
    PRODUCT_NAME,
    ADDED_TO_CART,
    ABANDONED_CARTS,
    (ABANDONED_CARTS * 100.0 / ADDED_TO_CART) AS ABANDONMENT_RATE
FROM PRODUCT_FUNNEL_SUMMARY
WHERE ADDED_TO_CART > 0
ORDER BY ABANDONMENT_RATE DESC
LIMIT 1;

-- 10. What is the average conversion rate from view to cart add?
SELECT 
    ROUND(AVG(ADDED_TO_CART * 100.0 / VIEWS), 2) AS VIEW_TO_CART_CONVERSION
FROM PRODUCT_FUNNEL_SUMMARY
WHERE VIEWS > 0;

-- PART 3: CAMPAIGN ANALYSIS
-- Creating the visit summary table
CREATE OR REPLACE TABLE VISIT_SUMMARY AS
WITH VISIT_EVENTS AS (
    SELECT
        E.VISIT_ID,
        U.USER_ID,
        MIN(E.EVENT_TIME) AS VISIT_START_TIME,
        COUNT(CASE WHEN E.EVENT_TYPE = 1 THEN 1 END) AS PAGE_VIEWS,
        COUNT(CASE WHEN E.EVENT_TYPE = 2 THEN 1 END) AS CART_ADDS,
        COUNT(CASE WHEN E.EVENT_TYPE = 3 THEN 1 END) AS PURCHASE_EVENTS,
        COUNT(CASE WHEN E.EVENT_TYPE = 4 THEN 1 END) AS IMPRESSION,
        COUNT(CASE WHEN E.EVENT_TYPE = 5 THEN 1 END) AS CLICK
    FROM EVENTS E
    JOIN USERS U
        ON E.COOKIE_ID = U.COOKIE_ID
    GROUP BY E.VISIT_ID, U.USER_ID
)
SELECT
    V.VISIT_ID,
    V.USER_ID,
    V.VISIT_START_TIME,
    V.PAGE_VIEWS,
    V.CART_ADDS,
    CASE WHEN V.PURCHASE_EVENTS > 0 THEN 1 ELSE 0 END AS PURCHASE,
    C.CAMPAIGN_NAME,
    V.IMPRESSION,
    V.CLICK
FROM VISIT_EVENTS V
LEFT JOIN CAMPAIGN_IDENTIFIER C
    ON V.VISIT_START_TIME BETWEEN C.START_DATE AND C.END_DATE;

SELECT * FROM VISIT_SUMMARY;
